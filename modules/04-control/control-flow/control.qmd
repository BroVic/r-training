---
title: "Control Flow in R"
author: "Victor Ordu"
date: ""
format: revealjs
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## Recap of the Use of Boolean Logic
Simply put, Boolean logic refers to binary values that can are akin to a switch:

- OFF/ON
- 0/1
- yes/no

In R, the inbuilt options for Boolean logic are `TRUE/FALSE`.

## Logic Table
This is how combination of Boolean values evaluate with `&&` (`AND`), `||` (`OR`), and `xor`.

| \( P \) | \( Q \) | \( P AND Q \) | \( P OR Q \) | \( \neg P \) |
|---------|---------|---------------|------------|----------------|
| T       | T       | T             | T          | F              |
| T       | F       | F             | T          | F              |
| F       | T       | F             | T          | T              |
| F       | F       | F             | F          | T              |


## Conditionals

- `if`, `else if`, `else`: These can be used to instruct a particular part of the code to be run or not run.

- For example take this instruction:  
*If `x` is greater than `y`, print "Yes o!", otherwise print "No way!"*

---

- Using R code, it would look like this:

``` {r control_flow, eval = FALSE}
# Note that x is 8 and y is 2
if (x > y) {
  "Yes o!"
} else {
  "No way!"
}
```

*When the expression in `if()` is `TRUE`, the code in that part is executed. If `FALSE`, the `else` part is executed*.    

**What is the result?**

---

```{r}
x <- '8'

if(x < 5) {
  "yes" 
  } else {
    "no"
  }
```

---

```{r}
if (is.integer(x)) {
  "Integer"
} else if (is.double(x)) {
  "Double"
} else if (is.character(x)) {
  "String"
} else {
  "What the heck are you?"
}
```


## Loops

![](www/img/loop.webp)

Loops allow us to run a code block over and over again.

For a simple explanation of loops, read **[this article](https://adventureswithr.wordpress.com/2020/08/11/r-loops/)**.

## Motivation
Imagine having to write code that has the same statement repeated:

```{r loops-motivate}
#| eval: false
x <- 1L

x <- x + 1
x <- x + 1
x <- x + 1
# and on and on...
```

---

How about a construct that will allow us to just write the statement

```{r loop-pseudo}
#| eval: false

x <- 1L

# Repeat this statement 3 times but write it once
x <- x + 1  # x 3
x
```

---

##  `repeat`

```{r}
# write repeat loop that prints all the even numbers from 2-10
# via incrementing the variable, i <- 0
i <- 0
repeat{
  i <- i + 2
  print(i)
  if(i >= 10)
    break
}
```

---

```{r}
# 2..Using the following variables
msg <- c("Hello")
i <- 1

# write a repeat{} loop that breaks of the incrementation of "i" after
# 5 loops, and prings "msg" at every increment.
repeat{
  i <- i + 1
  print(msg)
  if (i >= 6)
    break
}
```

## `while`

```{r}
# 3. Wwith i <- 1, write a while() loop that prints the odd numbers
# from 1 through 7
i <- 1

while (i <= 7) {
  if ((i %% 2) != 0)
    print(i)
  i <- i + 1
}
```

---

```{r}
# 4. Using the following variable:
msg <- c("Hello")
i <- 1

# write a while() loop that increments the variabe "i" 6 times and prints "msg"
# at every iteration
while (i < 7) {
  i <- i + 1
  print(msg)
}
```

## `for`

```{r}
# 5. Print the first four numbers of this sequence
x <- c(7, 4, 3, 8, 9, 25)

for (i in 1:4)
  print(x[i])

# 6. write a for() loop that prints all the letters in
y <- c("q", "w", "e", "r", "z", "c")

for (i in 1:length(y))
  print(y[i])
```


## Read data from a file
_Task: Read a table from a CSV file called **mockdata.csv**_.

![](www/img/mockdata.png)

---

Use `read.csv()` function to read the file into R and at the same time create an object called `mydata`.

```{r read_csv}
mydata <- read.csv("mockdata.csv")

# Print out the data inside R
mydata
```

**Assignment**: Use a loop to check the types of the columns.
